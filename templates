templates

base.html
{% include "header.html" %}

<!DOCTYPE html>
<html>
    <head>
        <title>pdf upload</title>

    </head>

    <body>
        <style>
            body {
        background-size: cover; /* Cover the entire viewport */
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-position: center; /* Center the background image */
        margin: 0;
            font-family: Arial, sans-serif;
    }
   
        /* Basic CSS for Navbar */

        
        .navbar {
            overflow: hidden;
            background-color: #32092d;
        }
        
        .navbar a {
            float: left;
            display: block;
            color: #f2f2f2;
            text-align: center;
            padding: 14px 20px;
            text-decoration: none;
        }
        
        .navbar a:hover {
            background-color: #523c3c;
            color: black;
        }
    

            /* Other CSS styles can go here */
        </style>
    <!--    <div class="navbar" >
            <a href=""  style="margin-bottom: 30px; margin-top: 30px; font-size: 30px;" >Admin Panel</a>
            <a href="{% url 'Register' %}" style="margin-left: 600px; margin-top: 30px;margin-bottom: 30px;">Register</a>
            <a href="{% url 'Login' %}" style="margin-bottom: 30px; margin-top: 30px; margin-left: -70px; ">LogIn</a>

            {% if user.is_authenticated %}
         <!-- <a href="{% url 'Profile' %}" style="margin-bottom: 30px; margin-top: 30px;">Profile</a>
            <a href="{% url 'Login' %}" style="margin-bottom: 30px; margin-top: 30px;margin-left: -70px;margin-right: 60px;">AdminLogin</a>
           
           {% else %}
            <a href="{% url 'Register' %}" style="margin-bottom: 30px; margin-top: 30px;">Register</a>

            {% endif %}
        </div>
    -->
 
      <nav class="navbar navbar-expand-lg navbar-dark" id="navbar">
        <div class="container-fluid" style="margin-top: 30px; margin-bottom: 30px">
          <a class="navbar-brand" href="#"><b>Admin Panel</b></a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">  
            <ul class="navbar-nav mx-auto ">
                <li class="nav-item" style="margin-left: 500px;">
                    <a class="nav-link" href="{% url 'Register' %}">Register</a>
                  </li>
                  <li class="nav-item" style="margin-left: 10px;">
                    <a class="nav-link" href="{% url 'Login' %}">LogIn</a>
                  </li>
                  <li class="nav-item" style="margin-left: 10px;">
                    <a class="nav-link" href="{% url 'Login' %}">AdminLogin</a>
                  </li>

</ul>
            </div>
            </div>
        </div>
      </nav>
      
        {% block content %}
        
        {% endblock %}
    </body>
    </html>
    <script>
        $(document).ready(function(){
            $(".alert").hide(4000);
        });
    </script>
    
    
 header.html
 
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
    

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
</body>
</html>

home.html

{% extends "index.html" %}
{% block content %}

<center>
    <div id="home">
    {% if user.is_authenticated %}
        <h1 style="color: gray; text-align: center;"> Hello : {{user.username}}</h1>
    {% else %}
        <h1 style="color: gray; text-align: center;">Home Page</h1>
    {% endif %}
</div>
    </center>
{% endblock %}


index.html


    {% include "header.html" %}
    {% include "navbar.html" %}

    <!DOCTYPE html>
    <html>
        <head>
            <title>navbar</title>
        </head>
        <body>
            {% block content %}
            
            {% endblock %}
        </body>
        </html>
        
 login.html
 
 {% extends "index.html" %}
{% block content %}

<style>
     body {
  height: 300px;
  background-color: #e2e2e2; /* For browsers that do not support gradients */
}
     </style>
 <center><h1> User Login</h1></center>
 {% if messages %}
 {% for message in messages %}
      <div class="alert alert-{{message.tags}}">
      {{ message}}
     </div>
     {% endfor %}
{% endif %}
<center>
<form method="POST" autocomplete="off">
    {% csrf_token %}
   {{form.as_p}}
   <button type="submit">Login</button>
</form><br>
   
</center>
{% endblock %}

logout

{% extends "index.html" %}
{% block content %}
<center>
    <h2> you have been logged out</h2>
    <br>
    Login Again ?<a href="{% url 'Login' %}">Login</a>
</center>
{% endblock %}

navbar.html


{% include "header.html" %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Navbar Example</title>
    <style>
        /* Basic CSS for Navbar */
        body {
            margin: 0;
            font-family: Arial, sans-serif;
        }
        
        .navbar {
            overflow: hidden;
            background-color: #04271c;
        }
        
        .navbar a {
            float: left;
            display: block;
            color: #f2f2f2;
            text-align: center;
            padding: 14px 20px;
            text-decoration: none;
        }
        
        .navbar a:hover {
            background-color: #5a4242;
            color: black;
        }
    </style>
</head>
<body>

<!-- Navbar HTML 
<div class="navbar" >
    <a href=""  style="margin-bottom: 30px; margin-top: 30px; font-size: 30px;" >Admin Panel</a>
    <a href="{% url 'Home' %}" style="margin-left: 600px; margin-top: 30px;margin-bottom: 30px;">Home</a>
    {% if user.is_authenticated %}
  command<a href="{% url 'Profile' %}" style="margin-bottom: 30px; margin-top: 30px;">Profile</a>
    <a href="{% url 'Logout' %}" style="margin-bottom: 30px; margin-top: 30px;">Logout</a>
   
   {% else %}
    <a href="{% url 'Login' %}" style="margin-bottom: 30px; margin-top: 30px;">LogIn</a>
    <a href="{% url 'Register' %}" style="margin-bottom: 30px; margin-top: 30px;">Register</a>
    {% endif %}
-->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Admin Panel</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
  
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav ml-auto">
        <li class="nav-item">
          <a class="nav-link" href="{% url 'Home' %}">Home</a>
        </li>
        {% if user.is_authenticated %}
        <!-- <li class="nav-item">
          <a class="nav-link" href="{% url 'Profile' %}">Profile</a>
        </li> -->
        <li class="nav-item">
          <a class="nav-link" href="{% url 'Logout' %}">Logout</a>
        </li>
        {% else %}
        <li class="nav-item">
          <a class="nav-link" href="{% url 'Login' %}">LogIn</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="{% url 'Register' %}">Register</a>
        </li>
        {% endif %}
      </ul>
    </div>
  </nav>
  

</div>


  
</div>

</body>
</html>


     profile.html
     
     
     {% extends "index.html" %}
{% block content %}
<center>
    <style>
        .dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #e2e2e2;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-content a:hover {background-color: #f1f1f1}

.dropdown:hover .dropdown-content {
  display: block;
}

.dropdown:hover .dropbtn {
  background-color: #3e8e41;
}
    </style>
 <h1> Welcome : {{user.username}}</h1>


 <div class="dropdown">
    <button class="upload">Dropdown</button>
    <div class="dropdown-content">
    <a href="{% url 'upload_pdf' %}">pdf upload</a>
    <a href="{% url 'upload_website' %}">Website Upload</a>
    </div>
  </div>
</center>
{% endblock %}

register.html

{% extends "index.html" %}
{% block content %}

<center>

    <h1> Signup</h1>
    <form method="POST" autocomplete="off">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{message.tags}}">
                    {{ message}}
                </div>
            {% endfor %}
        {% endif %}
 
        {% csrf_token %}

        <label for="username">Username</label>
        <input type="text" placeholder="Username" name="username" id="username" required>
<br><br>
        <label for="email">Email</label>
        <input type="email" placeholder="Email or Phone" name="email" id="email"  pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$+[gmail.com]" title="Must contain @gmail.com "><br><br>
        <label for="password1">Password</label>
        <input type="password" placeholder="Password" id="password1" name="password1"  pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required>
        <br><br>

        <label for="password2">Confirm Password</label>
        <input type="password" placeholder="Confirm Password" id="password2" name="password2"  pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required>
       <br><br>

    <button type="submit">SignIn</button>
</form>
<br>
<p>if you already have an account</p>
<a href="{% url 'Login' %}">Login</a>
</center>
{% endblock %}

success.html

<!-- success.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload Success</title>
</head>
<body>
    <h2>Upload Success</h2>
    <p>Your PDF has been successfully uploaded.</p>
</body>
</html>

upload_pdf_form.html

{% extends "index.html" %}
{% block content %}
<!-- upload_pdf.html -->

    <!-- upload_pdf_form.html -->
    <style>
        body {
            background-color: #e2e2e2;
            background-position: center; /* Center the background image */
        }
        
    
    </style>
<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <input type="file" name="location">
    <button type="submit">Upload</button>
</form>

{% endblock %}

upload_pdf.html

{% extends "index.html" %}
{% block content %}
<style>
    body {
        background-color: #e2e2e2; 
        background-size: cover; /* Cover the entire viewport */
        background-position: center; /* Center the background image */
    }
    

</style>
<center>
    <h2>Upload PDF</h2>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Upload</button>
    </form>
    {% if messages %}
    {% for message in messages %}
     {% if message.tags == 'error' %}
         <div class="alert alert-danger">
             {{message}}
         </div>
         {% else %}
         <div class="alert alert-{{ message.tags}}">
             {{message}}
         </div>
         {% endif %}
         {% endfor %}
     {% endif %}
    
     {% endblock %}
</center>


upload_website.html

{% extends "index.html" %}
{% block content %}

<center>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Validate Website</title>
</head>
<body>
    <style>
        body {
            background-color: #e2e2e2;  
            background-size: cover; /* Cover the entire viewport */
            background-position: center; /* Center the background image */
        }
        
    
    </style>
    <h1>Validate Website</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Validate</button>
    </form>
    {% if messages %}
        <ul>
            {% for message in messages %}
                <li>{{ message }}</li>
            {% endfor %}
        </ul>
    {% endif %}
</body>
</html>
<br>

    

</center>
{% endblock %}


urls.py



from django.contrib import admin
from django.urls import path
from account import views
from django.contrib.auth import views as auth_views
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import RedirectView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('home/', views.home, name="Home"),
   # path('login/', views.login, name="Login"),
    path("login/",auth_views.LoginView.as_view(template_name="login.html"),name="Login"),
    #path("logout/",auth_views.LogoutView.as_view(template_name="logout.html"),name="Logout"),
    path('logout/', views.logout, name="Logout"),
    path('register/', views.register, name="Register"),
    path('profile/', views.profile, name="Profile"),

    path("base/",auth_views.LoginView.as_view(template_name="base.html"),name="Base"),

    #path('website/', views.create_website_url, name="Profile"),
    path('website/', views.validate_website, name='upload_website'),

    path('pdf/', views.upload_pdf, name='upload_pdf'),
    path('success/', views.success_view, name='success'),
    path('favicon.ico', RedirectView.as_view(url='/static/images/favicon.ico', permanent=True)),


]
urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)

forms.py

from django.contrib.auth.models import User
from .models import UserProfile
from .models import Website
from django.contrib.auth.forms import UserCreationForm
from django import forms
from .models import UserProfile
from .models import pdfs

import hashlib

class CreateUserForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ['name', 'email', 'password']
        widgets = {
            'password': forms.PasswordInput(),
        }



class UploadPDFForm(forms.Form):
    location = forms.FileField()
   # file_name=forms.CharField(widget=forms.TextInput(attrs={'class':'form-control'}))

    #file=forms.FileField(widget=forms.FileInput(attrs={'class':'form-control'}))
    file_hash = forms.CharField()


# forms.py


class WebsiteForm(forms.ModelForm):
    class Meta:
        model = Website
        fields = ['url']


from django import forms
import hashlib
# Include 'location' and 'to_be_embed' fields

    # New field for file hash

def clean_location(self):
        location = self.cleaned_data['location']
        
        # Calculate hash of the file content
        if location:
            location.seek(0)  # Reset the file pointer
            file_content = location.read()
            file_hash = hashlib.md5(file_content).hexdigest()

            # Set the file_hash value
            self.cleaned_data['file_hash'] = file_hash

        return location


models.py

# Create your models here.
from django.db import models


class UserProfile(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    password = models.CharField(max_length=100)




# models.py
from django.db import models
import hashlib

class pdfs(models.Model):
    location = models.FileField(upload_to='upload/')
   # embedding_vector = models.TextField()  # Field to store embedding vector
    #location = models.FileField(upload_to='upload/',default='upload/')
    to_be_embed = models.TextField()

    status = models.BooleanField(default=False)  # New field to indicate embedding status
    file_hash = models.CharField(max_length=32, unique=True)

    class Meta:
        db_table = 'pdf_files' 


    def save(self, *args, **kwargs):
        # Calculate hash of the file content
        if self.location:
            self.file_hash = hashlib.md5(self.location.read()).hexdigest()
        super().save(*args, **kwargs)



# models.py

from django.db import models

class Website(models.Model):
    url = models.URLField(unique=True)
    
    def _str_(self):
        return self.url
    class Meta:
        db_table = 'website'

views.py

from django.shortcuts import render,redirect
from .forms import CreateUserForm
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.contrib import messages
import os
from django.conf import settings
from django.http import HttpResponse
from django.http import HttpResponseRedirect
import hashlib
from .forms import UploadPDFForm
from .utils import extract_text_from_pdf, text_to_vector
from .models import pdfs
import uuid
from django.contrib.auth.decorators import login_required
@login_required

# Create your views here.
def home(request):
    return render(request,"home.html")
 

def register(request):
    if request.method=='POST':
        name=request.POST["username"]
        email=request.POST["email"]
        password1=request.POST["password1"]
        password2=request.POST["password2"]

        if password1==password2:
            user=User.objects.create_user(username=name,email=email,password=password1)
            user.is_staff=True
            user.is_superuser=True
            user.save()
            messages.warning(request,'Your account has been created! your able to login..')
            return redirect('Login')
        
        else:
            messages.warning(request,'password mismatching!...')
            return redirect('Register')
    else:
        form=CreateUserForm()
        return render(request,"register.html",{'form':form})
    
def profile(request):
    return render(request,"profile.html")


def logout(request):
   return render(request,"logout.html")  




def upload_pdf(request):
    if request.method == 'POST':
        form = UploadPDFForm(request.POST, request.FILES)
        if form.is_valid():
            location = request.FILES['location']

            file_hash = hashlib.md5(location.read()).hexdigest()

            # Check if a file with the same hash exists in the database
            exists = pdfs.objects.filter(file_hash=file_hash).exists()
            

            if exists:
                messages.error(request, 'A file with the same content already exists.')
        
            #if pdfs.objects.filter(file_hash=file_hash).exists():
                #messages.warning(request, 'File already stored in the database.')
                #return HttpResponseRedirect('/upload_pdf/')  # Redirect to home or any appropriate page
                #return render(request, 'upload_pdf.html', {'form': form})
            else:

                text = extract_text_from_pdf(location)
                vector = text_to_vector(text)

                status = True

            # Save the vector to the database
                pdf_vector = pdfs(location=location, to_be_embed=vector,status=status,file_hash=file_hash)
                pdf_vector.save()
                return HttpResponseRedirect('/success/')  # Redirect to success page
    else:
        form = UploadPDFForm()
    return render(request, 'upload_pdf.html', {'form': form})

def success_view(request):
    return render(request, 'success.html')



from .forms import WebsiteForm

def validate_website(request):
    if request.method == 'POST':
        form = WebsiteForm(request.POST)
        if form.is_valid():
            url = form.cleaned_data['url']
          
            website = form.save()
            messages.success(request, f'Website {website.url} is valid!')
            return render(request, 'upload_website.html', {'form': WebsiteForm()})
    else:
        form = WebsiteForm()
    return render(request, 'upload_website.html', {'form': form})
    
    
 settings.py
 

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nt%wubtk1i8i#qq(70zp0v*)jyf$f=6&w3!9sod7($arap%!i*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'account',
   
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'login.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'login.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
'default': {
'ENGINE': 'django.db.backends.postgresql',
'NAME': 'test4',
'USER':'yazhini10',
'PASSWORD':'yazhini10',
'HOST':'localhost',
'PORT':5432

}
}


"""DATABASES = {
'default': {
'ENGINE': 'django.db.backends.sqlite3',
'NAME': BASE_DIR / 'db.sqlite3',
}
}"""


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

LOGIN_REDIRECT_URL='Home'


STATICFILES_DIR=[BASE_DIR / 'static']

MEDIA_URL='/upload/'
MEDIA_ROOT=os.path.join(BASE_DIR,'upload')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

